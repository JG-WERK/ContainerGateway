# Use set file to place a Gateway license here
license:
  accept: true
  existingSecretName: ssg-gateway-secret

# Number of Gateways to deploy
replicas: 1

# Cluster Hostname
clusterHostname: gateway-container.training.local

## Reference an existing secret for sensitive Gateway fields
## Note that additionalSecret will no longer take effect when existingGatewaySecret is true.

existingGatewaySecretName: ssg-gateway-secret

## The folllowing must be included
  # SSG_ADMIN_USERNAME
  # SSG_ADMIN_PASSWORD
  # SSG_CLUSTER_PASSWORD
## If using a Database
  # SSG_DATABASE_USER
  # SSG_DATABASE_PASSWORD

# Cluster Password
#clusterPassword: mypassword

# This enables/disables Policy Manager Access and sets the SSG_ADMIN username and password
# Credentials will be moved to a secret object in the next push..
management:
  enabled: true
  # Enable Restman, if DBbacked this setting will persist until manually deleted via Policy Manager.
  restman:
    enabled: true

# Database configuration
database:
  # DB Backed or ephemeral
  enabled: false
    # A MySQL Database is configured with this Chart, set to false and set jdbcURL to use your own DB server
  create: false

## If loading a TLS Key/Pair
# This key will become the default ssl key. Can only have one.
# use with helm command: --set-file tls.key=/path/to/ssl.p12 --set tls.pass=keypass
## Reference an existing secret for the Gateway Private Key, the secret needs to contain the following.
  # SSG_SSL_KEY - decoded value needs to be base64 encoded. (cat ssl.p12 | base64 --wrap=0)
  # SSG_SSL_KEY_PASS
tls:
  useSignedCertificates: true
  existingSecretName: ssg-gateway-secret

config:
  heapSize: "2g"
  javaArgs:
    - -Dcom.l7tech.bootstrap.autoTrustSslKey=trustAnchor,TrustedFor.SSL,TrustedFor.SAML_ISSUER
    - -Dcom.l7tech.server.audit.message.saveToInternal=true
    - -Dcom.l7tech.server.audit.admin.saveToInternal=true
    - -Dcom.l7tech.server.audit.system.saveToInternal=true
    - -Dcom.l7tech.server.audit.log.format=json
    - -Djava.util.logging.config.file=/opt/SecureSpan/Gateway/node/default/etc/conf/log-override.properties
    - -Dcom.l7tech.server.pkix.useDefaultTrustAnchors=true
    - -Dcom.l7tech.security.ssl.hostAllowWildcard=true
  log:
    override: true
    properties: |-
      handlers = com.l7tech.server.log.GatewayRootLoggingHandler, com.l7tech.server.log.ConsoleMessageSink$L7ConsoleHandler
      com.l7tech.server.log.GatewayRootLoggingHandler.formatter = com.l7tech.util.JsonLogFormatter
      java.util.logging.SimpleFormatter.format=
      com.l7tech.server.log.ConsoleMessageSink$L7ConsoleHandler.formatter = com.l7tech.util.JsonLogFormatter
      com.l7tech.server.log.ConsoleMessageSink$L7ConsoleHandler.level = CONFIG
  cwp:
    enabled: false
    properties:
      - name: io.httpsHostAllowWildcard
        value: true
      - name: log.levels
        value: |
          com.l7tech.level = CONFIG
          com.l7tech.server.policy.variable.ServerVariables.level = SEVERE
          com.l7tech.external.assertions.odata.server.producer.jdbc.GenerateSqlQuery.level = SEVERE
          com.l7tech.server.policy.assertion.ServerSetVariableAssertion.level = SEVERE
          com.l7tech.external.assertions.comparison.server.ServerComparisonAssertion = SEVERE
      - name: audit.setDetailLevel.FINE
        value: 152 7101 7103 9648 9645 7026 7027 4155 150 4716 4114 6306 4100 9655 150 151 11000 4104
  systemProperties: |-
    # By default, FIPS module will block an RSA modulus from being used for encryption if it has been used for
    # signing, or visa-versa. Set true to disable this default behaviour and remain backwards compatible.
    com.safelogic.cryptocomply.rsa.allow_multi_use=true
    # Specifies the type of Trust Store (JKS/PKCS12) provided by AdoptOpenJDK that is used by Gateway.
    # Must be set correctly when Gateway is running in FIPS mode. If not specified it will default to PKCS12.
    javax.net.ssl.trustStoreType=jks
    # Additional properties go here
# This mounts one or more bundles that exist as secrets or configmaps in your Kubernetes Cluster.
# When creating these secrets/configmaps the format should be
# key: bundle1.bundle value: <xml value>
# Each bundle that you create as a ConfigMap can not exceed 1MB in size.
existingBundle:
  enabled: false
  configMaps:
  - service-hello-world
  secrets:

#service:
#  annotations:
#    cloud.google.com/load-balancer-type: "Internal"

#VOOR STAKATER RELOADER:
#HOE ZET JE ANNOTATION VOOR DEPLOYMENT VIA HELM CHART???
#deployment:
#  annotations:
#    secret.reloader.stakater.com/reload: "ssg-gateway-secret"    
